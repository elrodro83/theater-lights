# AutoGenerated by theater-light Add-On!
# Author: Rodro (theater-lights@rodronet.com.ar)

# This module's future home should be inside userdata/addon_data/script.cinema.experience/ha_scripts
# to make sure it does not get over written when updating the script

import xbmc, xbmcaddon
import socket, sys
from threading import Thread

triggers       = sys.modules[ "__main__" ].triggers
ha_settings    = sys.modules[ "__main__" ].ha_settings

settings = xbmcaddon.Addon(id='script.service.theater-light')

class Automate:
    def __init__( self ):
        pass
    
    def broadcastUDP( self, data, ipaddress = '255.255.255.255' ):
        IPADDR = ipaddress
        udpPort = int(settings.getSetting("udpPort"))
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
        if hasattr(socket,'SO_BROADCAST'):
            s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        s.connect((IPADDR, udpPort))
        s.send(data)
        s.close()
    
    def activate_ha( self, trigger = None, prev_trigger = None, mode="thread" ):
        if ha_settings[ "ha_enable" ]:
            if ha_settings[ "ha_multi_trigger" ] and prev_trigger == trigger:
                pass
            elif mode != "thread":
                self.activate_on( trigger )
            else:
                thread = Thread( name='ha_trigger', target=self.activate_on, args=( trigger, ) )
                thread.start()
        return prev_trigger

    def activate_on( self, trigger = None ):
        """
            Scripting to trigger almost anything(HA, other scripts, etc...) when videos start.  
            
            Usage:
                activate_on( "Movie" )
                will trigger code that is set under the Movie heading.
                
        """
        if not trigger:
            xbmc.log( "[script.cinema.experience] - [ home_automation.py ] - No Trigger Sent, Returning", level=xbmc.LOGNOTICE )
            return
        xbmc.log( "[script.cinema.experience] - [ home_automation.py ] - activate_on( %s ) Triggered" % trigger, level=xbmc.LOGNOTICE )
        if trigger in triggers:
            xbmc.log( "[script.cinema.experience] - [ home_automation.py ] - Trigger %s" % trigger, level=xbmc.LOGNOTICE )
        # Script Start
        if trigger == "Script Start" and ha_settings[ "ha_script_start" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>script_start</b>" )
            pass
        # Trivia Intro
        elif trigger == "Trivia Intro" and ha_settings[ "ha_trivia_intro" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>trivia_intro</b>" )
            pass
        # Trivia
        elif trigger == "Trivia" and ha_settings[ "ha_trivia_start" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>trivia_start</b>" )
            pass
        # Trivia Outro
        elif trigger == "Trivia Outro" and ha_settings[ "ha_trivia_outro" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>trivia_outro</b>" )
            pass
        # Movie Theatre Intro
        elif trigger == "Movie Theater Intro" and ha_settings[ "ha_mte_intro" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>movie_theatre_intro</b>" )
            pass
        # Coming Attractions Intro
        elif trigger == "Coming Attractions Intro" and ha_settings[ "ha_cav_intro" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>coming_attractions_intro</b>" )
            pass
        # Trailer
        elif trigger == "Movie Trailer" and ha_settings[ "ha_trailer_start" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>trailer</b>" )
            pass
        # Coming Attractions Outro
        elif trigger == "Coming Attractions Outro" and ha_settings[ "ha_cav_outro" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>coming_attractions_outro</b>" )
            pass
        # Feature Presentation Intro
        elif trigger == "Feature Presentation Intro" and ha_settings[ "ha_fpv_intro" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>feature_intro</b>" )
            pass
        # MPAA Rating
        elif trigger == "MPAA Rating" and ha_settings[ "ha_mpaa_rating" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>mpaa_rating</b>" )
            pass
        # Countdown
        elif trigger == "Countdown" and ha_settings[ "ha_countdown_video" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>countdown_video</b>" )
            pass
        # Audio Format
        elif trigger == "Audio Format" and ha_settings[ "ha_audio_format" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>audio_video</b>" )
            pass
        # Movie
        elif trigger == "Movie" and ha_settings[ "ha_movie" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>movie_start</b>" )
            pass
        # Feature Presentation Outro
        elif trigger == "Feature Presentation Outro" and ha_settings[ "ha_fpv_outro" ]:
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>feature_outro</b>" )
            pass
        # Movie Theatre Intro
        elif trigger == "Movie Theatre Outro" and ha_settings[ "ha_mte_outro" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>movie_theatre_outro</b>" )
            pass
        # Intermission
        elif trigger == "Intermission" and ha_settings[ "ha_intermission" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>intermission</b>" )
            pass
        # Script End
        elif trigger == "Script End" and ha_settings[ "ha_script_end" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>script_end</b>" )
            pass
        # Paused
        elif trigger == "Pause" and ha_settings[ "ha_paused" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>paused</b>" )
            pass
        # Resumed
        elif trigger == "Resume" and ha_settings[ "ha_resumed" ]: 
            # place code below this line
            self.broadcastUDP( "<b>CE_Automate<li>resumed</b>" )
            pass
        else:
            xbmc.log( "[script.cinema.experience] - [ home_automation.py ] - Opps. Something happened", level=xbmc.LOGNOTICE )
